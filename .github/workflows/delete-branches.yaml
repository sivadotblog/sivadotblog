name: Delete Merged Branches

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["delete-branch"]

jobs:
  delete-branches:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Delete merged branches
        uses: actions/github-script@v4
        with:
          script: |
            const { data: pullRequests } = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              per_page: 100
            });
            console.log('All Pull Requests:', pullRequests.map(pr => pr.head.ref));
            const mergedBranches = pullRequests
              .filter(pr => pr.merged_at)
              .map(pr => pr.head.ref);
            console.log('Merged Branches:', mergedBranches);

            const { data: branches } = await github.repos.listBranches({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: branch.commit.sha
              commit_date: branch.commit.committer.date
            });

            const thirtyDaysAgo = new Date();
            thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
            const branchesToDelete = []
            for (const branch of branches) {
              if (mergedBranches.includes(branch.name)) {
                const { data: commit } = await github.repos.getCommit({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: branch.commit.sha
                });
                const branchCommitDate = commit.commit.committer.date;
                if (new Date(branchCommitDate) < thirtyDaysAgo) {
                  branchesToDelete.push(branch);
                }
              }
            }

            console.log('Branches to Delete:', branchesToDelete);

            for (const branch of branchesToDelete) {
              await github.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branch.name}`
              });
            }

